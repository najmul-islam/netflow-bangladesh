<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Concerns\HasUuids;

class BatchNotification extends Model
{
    use HasFactory, HasUuids;

    protected $table = 'batch_notifications';
    protected $primaryKey = 'notification_id';
    public $incrementing = false;
    protected $keyType = 'string';
    public $timestamps = false;

    protected $fillable = [
        'user_id',
        'batch_id',
        'title',
        'content',
        'type',
        'category',
        'is_read',
        'read_at',
        'action_url',
        'metadata',
        'schedule_id',
        'assessment_id',
        'auto_generated'
    ];

    protected $casts = [
        'is_read' => 'boolean',
        'read_at' => 'datetime',
        'metadata' => 'json',
        'auto_generated' => 'boolean',
        'created_at' => 'datetime',
    ];

    // Relationships
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function batch()
    {
        return $this->belongsTo(CourseBatch::class, 'batch_id');
    }

    public function schedule()
    {
        return $this->belongsTo(BatchSchedule::class, 'schedule_id');
    }

    public function assessment()
    {
        return $this->belongsTo(BatchAssessment::class, 'assessment_id');
    }

    // Helper methods
    public function isRead()
    {
        return $this->is_read;
    }

    public function isUnread()
    {
        return !$this->is_read;
    }

    public function isInfo()
    {
        return $this->type === 'info';
    }

    public function isSuccess()
    {
        return $this->type === 'success';
    }

    public function isWarning()
    {
        return $this->type === 'warning';
    }

    public function isError()
    {
        return $this->type === 'error';
    }

    public function isUrgent()
    {
        return $this->type === 'urgent';
    }

    public function isSystemCategory()
    {
        return $this->category === 'system';
    }

    public function isBatchCategory()
    {
        return $this->category === 'batch';
    }

    public function isClassCategory()
    {
        return $this->category === 'class';
    }

    public function isAssessmentCategory()
    {
        return $this->category === 'assessment';
    }

    public function isForumCategory()
    {
        return $this->category === 'forum';
    }

    public function isMessageCategory()
    {
        return $this->category === 'message';
    }

    public function isReminderCategory()
    {
        return $this->category === 'reminder';
    }

    public function isCertificateCategory()
    {
        return $this->category === 'certificate';
    }

    public function isAnnouncementCategory()
    {
        return $this->category === 'announcement';
    }

    public function wasAutoGenerated()
    {
        return $this->auto_generated;
    }

    public function hasActionUrl()
    {
        return !empty($this->action_url);
    }

    public function getTypeDisplayAttribute()
    {
        return match($this->type) {
            'info' => 'Information',
            'success' => 'Success',
            'warning' => 'Warning',
            'error' => 'Error',
            'urgent' => 'Urgent',
            default => ucfirst($this->type)
        };
    }

    public function getCategoryDisplayAttribute()
    {
        return match($this->category) {
            'system' => 'System',
            'batch' => 'Batch',
            'class' => 'Class',
            'assessment' => 'Assessment',
            'forum' => 'Forum',
            'message' => 'Message',
            'reminder' => 'Reminder',
            'certificate' => 'Certificate',
            'announcement' => 'Announcement',
            default => ucfirst($this->category)
        };
    }

    public function getIconAttribute()
    {
        return match($this->category) {
            'system' => 'cog',
            'batch' => 'users',
            'class' => 'calendar',
            'assessment' => 'clipboard-check',
            'forum' => 'comments',
            'message' => 'envelope',
            'reminder' => 'bell',
            'certificate' => 'award',
            'announcement' => 'bullhorn',
            default => 'info-circle'
        };
    }

    public function getColorClassAttribute()
    {
        return match($this->type) {
            'info' => 'blue',
            'success' => 'green',
            'warning' => 'yellow',
            'error' => 'red',
            'urgent' => 'red',
            default => 'gray'
        };
    }

    public function markAsRead()
    {
        if (!$this->isRead()) {
            $this->update([
                'is_read' => true,
                'read_at' => now()
            ]);
        }
    }

    public function markAsUnread()
    {
        if ($this->isRead()) {
            $this->update([
                'is_read' => false,
                'read_at' => null
            ]);
        }
    }

    public function getMetadataValue($key, $default = null)
    {
        return data_get($this->metadata, $key, $default);
    }

    public function setMetadataValue($key, $value)
    {
        $metadata = $this->metadata ?? [];
        data_set($metadata, $key, $value);
        $this->update(['metadata' => $metadata]);
    }

    public function getTimeAgoAttribute()
    {
        return $this->created_at->diffForHumans();
    }

    public function isRecent($hours = 24)
    {
        return $this->created_at->diffInHours(now()) <= $hours;
    }

    public function scopeUnread($query)
    {
        return $query->where('is_read', false);
    }

    public function scopeRead($query)
    {
        return $query->where('is_read', true);
    }

    public function scopeByType($query, $type)
    {
        return $query->where('type', $type);
    }

    public function scopeByCategory($query, $category)
    {
        return $query->where('category', $category);
    }

    public function scopeByUser($query, $userId)
    {
        return $query->where('user_id', $userId);
    }

    public function scopeByBatch($query, $batchId)
    {
        return $query->where('batch_id', $batchId);
    }

    public function scopeUrgent($query)
    {
        return $query->where('type', 'urgent');
    }

    public function scopeRecent($query, $hours = 24)
    {
        return $query->where('created_at', '>=', now()->subHours($hours));
    }

    public function scopeAutoGenerated($query)
    {
        return $query->where('auto_generated', true);
    }

    public function scopeManual($query)
    {
        return $query->where('auto_generated', false);
    }
}